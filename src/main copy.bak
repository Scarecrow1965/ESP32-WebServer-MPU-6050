#include <Arduino.h>
#include <Wire.h>

// for OLED screen
#include <U8g2lib.h>
#include <Adafruit_SSD1306.h>

// for MPU-6050
#include <Adafruit_MPU6050.h>

#include <SPI.h>
#include <FS.h>

// for WiFi and WebServer
#include <WiFi.h>
#include <AsyncTCP.h>
#include "SPIFFS.h"
#include <ESPAsyncWebServer.h>
#include <Arduino_JSON.h>

// Replace with your network credentials
const char *ssid = "Sc4r3Cr0w245";
const char *password = "R0b0tech_1";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

// Create an Event Source on /events
AsyncEventSource events("/events");

// Json Variable to Hold Sensor Readings
JSONVar readings;

// Timer variables
unsigned long lastTime = 0;
unsigned long lastTimeTemperature = 0;
unsigned long lastTimeAcc = 0;
unsigned long gyroDelay = 10;
unsigned long temperatureDelay = 1000;
unsigned long accelerometerDelay = 200;

Adafruit_MPU6050 mpu;

sensors_event_t a, g, temp;

float gyroX, gyroY, gyroZ;
float accX, accY, accZ;
float temperature;
float accelBias[3] = {0, 0, 0};
// Gyroscope sensor deviation
// float gyroXerror = 0.07; // original
// float gyroYerror = 0.03; // original
// float gyroZerror = 0.01; // original
float gyroXerror = 0.35; // modified
float gyroYerror = 0.15; // modified
float gyroZerror = 0.05; // modified
// ================================================================

// I2C Scanner reveals the following addresses:
// I2C device found at address 0x3C ! = OLED
// I2C device found at address 0x68 ! = MPU-6050
#define OLED_CLOCK 22 // SCA pin on Display = pin 17 (I2C_SCL) on ESP32 DEVKIT V1 = GPIO 22
#define OLED_DATA 21  // SDL pin on display = pin 20 (I2C_SDA) on ESP32 DEVKIT V1 = GPIO 21
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, OLED_CLOCK, OLED_DATA, U8X8_PIN_NONE);
bool bLED = LOW;
uint8_t oled_LineH = 0;

// ================================================================
void imuOffset()
{
    mpu.setCycleRate(MPU6050_CYCLE_40_HZ);
    mpu.setAccelerometerRange(MPU6050_RANGE_16_G);
    mpu.setGyroRange(MPU6050_RANGE_2000_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_44_HZ);

    // Calibrate accelerometer
    for (int i = 0; i < 1000; i++)
    {
        sensors_event_t a, g, temp;
        mpu.getEvent(&a, &g, &temp);

        accelBias[0] += a.acceleration.x;
        accelBias[1] += a.acceleration.y;
        accelBias[2] += a.acceleration.z - (float)9.81; // Subtract gravity

        delay(20);
    }
    accelBias[0] /= 1000;
    accelBias[1] /= 1000;
    accelBias[2] /= 1000;
};

// Init MPU6050
void initMPU()
{
    if (!mpu.begin())
    {
        Serial.println("Failed to find MPU6050 chip using Adafruit_MPU6050 library!");
        while (1)
        {
            delay(10);
        }
    }

    imuOffset();
    Serial.println("MPU6050 Found with Adafruit_MPU6050 Library!");
};

void initSPIFFS()
{
    if (!SPIFFS.begin())
    {
        Serial.println("An error has occurred while mounting SPIFFS");
    }

    File root = SPIFFS.open("/");

    if (!root)
    {
        Serial.println("Failed to open directory");
        return;
    }

    if (!root.isDirectory())
    {
        Serial.println("Not a directory");
        return;
    }

    File file = root.openNextFile();

    while (file)
    {
        if (file.isDirectory())
        {
            Serial.print("  DIR : ");
            Serial.println(file.name());
        }
        else
        {
            Serial.print("  FILE: ");
            Serial.println(file.name());
        }
        file = root.openNextFile();
    }
    Serial.println("SPIFFS mounted successfully");
};

// Initialize WiFi
void initWiFi()
{
    WiFi.mode(WIFI_STA);
    WiFi.begin(ssid, password);
    Serial.println("");
    Serial.print("Connecting to WiFi...");
    while (WiFi.status() != WL_CONNECTED)
    {
        Serial.print(".");
        delay(1000);
    }
    Serial.println("");
    Serial.println(WiFi.localIP());
};

String getGyroReadings()
{
    mpu.getEvent(&a, &g, &temp);

    float gyroX_temp = g.gyro.x;
    if (abs(gyroX_temp) > gyroXerror)
    {
        gyroX += gyroX_temp / 50.00;
    }

    float gyroY_temp = g.gyro.y;
    if (abs(gyroY_temp) > gyroYerror)
    {
        gyroY += gyroY_temp / 70.00;
    }

    float gyroZ_temp = g.gyro.z;
    if (abs(gyroZ_temp) > gyroZerror)
    {
        gyroZ += gyroZ_temp / 90.00;
    }

    readings["gyroX"] = String(gyroX);
    readings["gyroY"] = String(gyroY);
    readings["gyroZ"] = String(gyroZ);

    String jsonString = JSON.stringify(readings);
    return jsonString;
};

String getAccReadings()
{
    mpu.getEvent(&a, &g, &temp);
    // Get current acceleration values
    accX = a.acceleration.x;
    accY = a.acceleration.y;
    accZ = a.acceleration.z;
    readings["accX"] = String(accX);
    readings["accY"] = String(accY);
    readings["accZ"] = String(accZ);
    String accString = JSON.stringify(readings);
    return accString;
};

String getTemperature()
{
    mpu.getEvent(&a, &g, &temp);
    temperature = temp.temperature;
    return String(temperature);
};
// ================================================================

// function to display information on the OLED screen
void displayAllGyro()
{
    bLED = !bLED; // toggle LED State
    digitalWrite(LED_BUILTIN, bLED);

    u8g2.clearBuffer();
    u8g2.home();
    u8g2.drawFrame(0, 0, u8g2.getWidth(), u8g2.getHeight()); // Draw a border around the display

    u8g2.setFont(u8g2_font_profont10_tf);
    u8g2.setCursor(3, oled_LineH * 2 + 2);
    u8g2.println("Accel(m/s^2)");
    u8g2.setCursor(3, oled_LineH * 3 + 2);
    u8g2.print("X: ");
    u8g2.print(accX);
    u8g2.print(", Y: ");
    u8g2.print(accY);
    u8g2.print(", Z: ");
    u8g2.print(accZ);
    u8g2.setCursor(3, oled_LineH * 4 + 2);
    u8g2.println("Gyro(rps)");
    u8g2.setCursor(3, oled_LineH * 5 + 2);
    u8g2.print("X: ");
    u8g2.print(gyroX, 1);
    u8g2.print(", Y: ");
    u8g2.print(gyroY);
    u8g2.print(", Z: ");
    u8g2.print(gyroZ);
    u8g2.setCursor(3, oled_LineH * 6 + 2);
    u8g2.print("Temp= ");
    u8g2.print(temperature / 340.00 + 36.53);
    u8g2.print(" ");
    u8g2.print(char(176));
    u8g2.setFont(u8g2_font_profont10_tf);
    u8g2.print("C");
    u8g2.sendBuffer(); // Send it out
};

void setup()
{
    Wire.begin();

    Serial.begin(115200);
    while (!Serial)
        ;

    Serial.print("ESP Board MAC Address:  ");
    Serial.println(WiFi.macAddress());

    pinMode(LED_BUILTIN, OUTPUT); // relying on GPIO2 LED to light up on MB

    u8g2.begin();
    u8g2.clear();
    u8g2.setFont(u8g2_font_profont10_tf);
    oled_LineH = u8g2.getFontAscent() + u8g2.getFontAscent();
    if (!u8g2.begin())
    {
        Serial.println(F("SSD1306 allocation failed!"));
        for (;;)
        {
            // don't proceed, loop forever
        }
    }

    // ================================================================
    initWiFi();
    initSPIFFS();
    initMPU();

    // Handle Web Server
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request)
              { request->send(SPIFFS, "/index.html", "text/html"); });

    server.serveStatic("/", SPIFFS, "/");

    server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request)
              {
    gyroX=0;
    gyroY=0;
    gyroZ=0;
    request->send(200, "text/plain", "OK"); });

    server.on("/resetX", HTTP_GET, [](AsyncWebServerRequest *request)
              {
    gyroX=0;
    request->send(200, "text/plain", "OK"); });

    server.on("/resetY", HTTP_GET, [](AsyncWebServerRequest *request)
              {
    gyroY=0;
    request->send(200, "text/plain", "OK"); });

    server.on("/resetZ", HTTP_GET, [](AsyncWebServerRequest *request)
              {
    gyroZ=0;
    request->send(200, "text/plain", "OK"); });

    // Handle Web Server Events
    events.onConnect([](AsyncEventSourceClient *client)
                     {
    if(client->lastId()){
      Serial.printf("Client reconnected! Last message ID that it got is: %u\n", client->lastId());
    }
    // send event with message "hello!", id current millis
    // and set reconnect delay to 1 second
    client->send("hello!", NULL, millis(), 10000); });
    server.addHandler(&events);

    // this part is given by GitHub Co-pilot
    server.on("/post", HTTP_POST, [](AsyncWebServerRequest *request)
              {
    int params = request->params();
    for(int i=0;i<params;i++)
    {
      AsyncWebParameter* p = request->getParam(i);
      if(p->isFile())
      {
        Serial.printf("POST[%s]: %s, size: %u\n", p->name().c_str(), p->value().c_str(), p->size());
      } else if(p->isPost())
      {
        Serial.printf("POST[%s]: %s\n", p->name().c_str(), p->value().c_str());
      } else 
      {
        Serial.printf("GET[%s]: %s\n", p->name().c_str(), p->value().c_str());
      }
    }
    request->send(200, "text/plain", "Data received"); });
    // end of part given by GitHub Co-pilot

    server.begin();

} // end setup function

void loop()
{
    bLED = !bLED; // toggle LED State
    digitalWrite(LED_BUILTIN, bLED);

    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);
    // Subtract bias
    a.acceleration.x -= accelBias[0];
    a.acceleration.y -= accelBias[1];
    a.acceleration.z -= accelBias[2];

    if ((millis() - lastTime) > gyroDelay)
    {
        // Send Events to the Web Server with the Sensor Readings
        events.send(getGyroReadings().c_str(), "gyro_readings", millis());
        // String gyroData = getGyroReadings();
        // Serial.println("Gyro data sent to " + WiFi.localIP().toString() + ": " + gyroData);
        lastTime = millis();
    }
    if ((millis() - lastTimeAcc) > accelerometerDelay)
    {
        // Send Events to the Web Server with the Sensor Readings
        events.send(getAccReadings().c_str(), "accelerometer_readings", millis());
        // String accData = getAccReadings();
        // Serial.println("Accelerometer data sent to " + WiFi.localIP().toString() + ": " + accData);
        lastTimeAcc = millis();
    }
    if ((millis() - lastTimeTemperature) > temperatureDelay)
    {
        // Send Events to the Web Server with the Sensor Readings
        events.send(getTemperature().c_str(), "temperature_reading", millis());
        // String tempData = getTemperature();
        // Serial.println("Temperature data sent to " + WiFi.localIP().toString() + ": " + tempData);
        lastTimeTemperature = millis();
    }

    displayAllGyro();
} // end loop function
